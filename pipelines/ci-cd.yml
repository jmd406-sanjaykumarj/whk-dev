trigger:
  branches:
    include:
      - dev

variables:
  containerRegistry: "crwhkaicontractinghtdevastus01.azurecr.io"
  backendImageName: "contractinsight-backend"
  frontendImageName: "contractinsight-frontend"
  dockerComposeFile: "docker-compose.yml"
  acrUsername: "$(ACR_USERNAME)"
  acrPassword: "$(ACR_PASSWORD)"

stages:
  - stage: Build
    displayName: "Build and Push Images"
    jobs:
      - job: BuildJob
        displayName: "Build Docker Images"
        pool:
          name: "self-hosted"
        steps:
          - script: |
              echo "Fixing permissions manually..."
              sudo chown -R $(whoami) .
              find . -type f -name "*.pyc" -exec rm -f {} +
            displayName: "Clean workspace and pyc files"
 
          - checkout: self

          - script: |
              echo "Logging into ACR manually..."
              echo "$(acrPassword)" | docker login $(containerRegistry) -u "$(acrUsername)" --password-stdin
            displayName: "Manual Login to ACR"

          - script: |
              echo "Building backend image..."
              docker build -t $(containerRegistry)/$(backendImageName):$(Build.BuildId) -f backend/Dockerfile ./backend

              echo "Building frontend image with environment variables..."
              docker build --no-cache \
                -t $(containerRegistry)/$(frontendImageName):$(Build.BuildId) \
                --build-arg VITE_API_URL="$(viteApiUrl)" \
                --build-arg VITE_MSAL_CLIENT_ID="$(viteMsalClientId)" \
                --build-arg VITE_MSAL_TENANT_ID="$(viteMsalTenantId)" \
                --build-arg VITE_MSAL_REDIRECT_URI="$(viteMsalRedirectUri)" \
                --build-arg VITE_WORKSPACE_ID="$(viteWorkspaceID)" \
                -f frontend/Dockerfile ./frontend
            displayName: "Build Docker Images"

          - script: |
              docker push $(containerRegistry)/$(backendImageName):$(Build.BuildId)
              docker push $(containerRegistry)/$(frontendImageName):$(Build.BuildId)
            displayName: "Push Images to ACR"

  - stage: Deploy
    displayName: "Deploy to VM"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeployJob
        displayName: "Deploy with Docker Compose"
        pool:
          name: "self-hosted"
        environment: "production"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "Fixing permissions manually..."
                    sudo chown -R $(whoami) .
                    find . -type f -name "*.pyc" -exec rm -f {} +
                  displayName: "Clean workspace and pyc files"
                - checkout: self

                - script: |
                    echo "$(acrPassword)" | docker login $(containerRegistry) -u "$(acrUsername)" --password-stdin
                  displayName: "Login to ACR on VM"

                - bash: |
                    echo "Saving current images..."
                    mkdir -p /tmp/deployment-state
                    docker images --format "{{.Repository}}:{{.Tag}}" | grep "$(containerRegistry)" > /tmp/deployment-state/previous.txt

                    echo "Updating docker-compose file with new images..."
                    sed -i "s|image:.*contractinsight-backend.*|image: $(containerRegistry)/$(backendImageName):$(Build.BuildId)|" $(dockerComposeFile)
                    sed -i "s|image:.*contractinsight-frontend.*|image: $(containerRegistry)/$(frontendImageName):$(Build.BuildId)|" $(dockerComposeFile)
                  displayName: "Prepare Deployment"

                - bash: |
                    echo "Deploying new containers..."
                    docker compose -f $(dockerComposeFile) down || true
                    docker compose -f $(dockerComposeFile) pull
                    docker compose -f $(dockerComposeFile) up -d
                  displayName: "Start New Deployment"

                - bash: |
                    echo "Running health check..."
                    for i in {1..30}; do
                      if curl -fs http://localhost:3000/health > /dev/null; then
                        echo "Health check passed!"
                        exit 0
                      fi
                      echo "Attempt $i: Waiting for service to be healthy..."
                      sleep 5
                    done
                    echo "Health check failed after 30 attempts"
                    exit 1
                  displayName: "Health Check"
                  continueOnError: true

  #               - bash: |
  #                   if [ "$?" != "0" ]; then
  #                     echo "Deployment failed. Rolling back..."
  #                     docker compose -f $(dockerComposeFile) down || true

  #                     PREV_BACKEND=$(grep "$(backendImageName)" /tmp/deployment-state/previous.txt | head -n1)
  #                     PREV_FRONTEND=$(grep "$(frontendImageName)" /tmp/deployment-state/previous.txt | head -n1)

  #                     if [ -z "$PREV_BACKEND" ] || [ -z "$PREV_FRONTEND" ]; then
  #                       echo "No previous images to roll back to."
  #                       exit 1
  #                     fi

  #                     sed -i "s|image:.*contractinsight-backend.*|image: $PREV_BACKEND|" $(dockerComposeFile)
  #                     sed -i "s|image:.*contractinsight-frontend.*|image: $PREV_FRONTEND|" $(dockerComposeFile)

  #                     docker compose -f $(dockerComposeFile) pull
  #                     docker compose -f $(dockerComposeFile) up -d

  #                     sleep 30
  #                     if curl -fs http://localhost:8000/ > /dev/null; then
  #                       echo "Rollback successful"
  #                     else
  #                       echo "Rollback failed"
  #                       exit 1
  #                     fi
  #                   else
  #                     echo "Deployment succeeded"
  #                   fi
  #                 displayName: "Rollback if needed"
  #                 condition: always()

  # - stage: Cleanup
  #   displayName: "Cleanup Old Images"
  #   dependsOn: Deploy
  #   condition: succeeded()
  #   jobs:
  #     - job: CleanupJob
  #       displayName: "Remove Old Images"
  #       pool:
  #         name: "self-hosted"
  #       steps:
  #         - bash: |
  #             echo "Cleaning up old ACR images..."
  #             docker images $(containerRegistry)/$(backendImageName) --format "{{.Tag}}" | grep -E '^[0-9]+$' | sort -nr | tail -n +6 | xargs -I {} docker rmi $(containerRegistry)/$(backendImageName):{} || true
  #             docker images $(containerRegistry)/$(frontendImageName) --format "{{.Tag}}" | grep -E '^[0-9]+$' | sort -nr | tail -n +6 | xargs -I {} docker rmi $(containerRegistry)/$(frontendImageName):{} || true
  #             docker image prune -f
  #           displayName: "Cleanup Docker Images"
